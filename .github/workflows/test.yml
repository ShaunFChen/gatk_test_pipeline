name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        uv sync --group dev
    
    - name: Run linting
      run: |
        uv run ruff check .
    
    - name: Run format check
      run: |
        uv run ruff format --check .
    
    - name: Run tests
      run: |
        uv run pytest tests/ -v --tb=short
    
    - name: Run type checking
      run: |
        uv run mypy src/ --ignore-missing-imports
    
    - name: Check package can be built
      run: |
        uv build

  docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install 3.10
    
    - name: Install dependencies
      run: |
        uv sync --group dev
    
    - name: Check notebooks can be executed
      run: |
        uv run jupyter nbconvert --to notebook --execute notebooks/*.ipynb --inplace || true
    
    - name: Generate documentation
      run: |
        echo "Documentation generation placeholder"

  docker:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t gatk-test-pipeline .
    
    - name: Test Docker image
      run: |
        docker run --rm gatk-test-pipeline python -c "import pysam; import pandas; print('Docker environment working')"
